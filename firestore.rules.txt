// Firestore Security Rules (starter). Adjust domain restrictions before production.
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Profile owned by user
    match /profiles/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Teams collection
    match /teams/{teamId} {
      allow read: if isTeamMember(teamId);
      allow write: if isTeamOwner(teamId);

      // Team members subcollection
      match /members/{memberId} {
        allow read: if isTeamMember(teamId);
        allow write: if request.auth != null && request.auth.uid == memberId && isTeamMember(teamId);
      }

      // Plays subcollection
      match /plays/{playId} {
        allow read: if isTeamMember(teamId);
        allow write: if isTeamMember(teamId); // tighten to owner/captain if必要
      }
    }
  }

  rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /profiles/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }
    match /teams/{teamId} {
      allow read, write: if request.auth != null; // 開発用
      match /plays/{playId} {
        allow read, write: if request.auth != null; // 開発用
      }
    }
  }
}

  function isTeamMember(teamId) {
    return request.auth != null
      && exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid));
  }

  function isTeamOwner(teamId) {
    return request.auth != null
      && get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role == 'owner';
  }
}
